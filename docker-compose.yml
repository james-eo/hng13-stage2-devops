services:
  nginx:
    image: nginx:stable-alpine
    container_name: nginx_lb
    ports:
      - "8080:80"
    volumes:
      - ./nginx/entrypoint.sh:/docker-entrypoint.d/10-configure-upstream.sh:ro
      - ./nginx/reload.sh:/usr/local/bin/reload.sh:ro
      - shared-logs:/shared/logs
    environment:
      - ACTIVE_POOL=${ACTIVE_POOL}
      - PORT=${PORT:-8080}
    depends_on:
      - app_blue
      - app_green
    restart: unless-stopped
    networks:
      - app_network

  app_blue:
    build:
      context: ./mock-app
      dockerfile: Dockerfile
    container_name: app_blue
    ports:
      - "8081:8080"
    environment:
      - RELEASE_ID=${RELEASE_ID_BLUE}
      - PORT=8080
      - APP_POOL=blue
    restart: unless-stopped
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  app_green:
    build:
      context: ./mock-app
      dockerfile: Dockerfile
    container_name: app_green
    ports:
      - "8082:8080"
    environment:
      - RELEASE_ID=${RELEASE_ID_GREEN}
      - PORT=8080
      - APP_POOL=green
    restart: unless-stopped
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  alert_watcher:
    build:
      context: ./watcher
      dockerfile: Dockerfile
    container_name: alert_watcher
    volumes:
      - shared-logs:/shared/logs
    environment:
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - ERROR_RATE_THRESHOLD=${ERROR_RATE_THRESHOLD:-2}
      - WINDOW_SIZE=${WINDOW_SIZE:-200}
      - ALERT_COOLDOWN_SEC=${ALERT_COOLDOWN_SEC:-300}
    depends_on:
      - nginx
    restart: unless-stopped
    networks:
      - app_network

volumes:
  shared-logs:

networks:
  app_network:
    driver: bridge
